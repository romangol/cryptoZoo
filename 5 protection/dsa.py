def tran(x):
	msg = 0
	ratio = 1
	for i in x:
		msg += ( i * ratio )
		ratio *= 0x100
	return msg

# calc z^-1 % m
def inverse_mod(z, m):
	if z > 0 and z < m and m > 0:
		i, j = m, z
		y1, y2 = 1, 0
		while j > 0:
			q = i / j
			r = i - j * q
			y = y2 - y1 * q
			i, j = j, r
			y2, y1 = y1, y
		if i == 1:
			return y2 % m
	return 0

	

msg = [0x74, 0x5A, 0xF2, 0xB3, 0xD4, 0x9F, 0x52, 0x56, 0x4E, 0xC0, 0xA3, 0x7B, 0xCE, 0x93, 0xB0, 0xA7, 0xDA, 0x97, 0x6F, 0xE4]

shaK = [0xD6, 0xF9, 0x1F, 0xA9, 0xF7, 0x89, 0x09, 0x9E, 0xA8, 0xEA, 0x5E, 0x49, 0x33, 0xF6, 0xD1, 0x62, 0x20, 0xA2, 0x3F, 0x63]

p = 0xB8AB7B9EDF305338612822F95ADE400DCDC0052ADB18C6FCEAAA38B1557CE77E4D6AE6EEAF10EE550D04E63CE1CB83B047BF12F4D2AFC261603EB4D6AA6DA17B02B2D9038AE359C0740348BA021ED9CFB537BBD2D774C7ED85A479C5C478E6DBE1CF2EA872855FC1378095A3F52DEB51644EFFAEAE8B15FA76F0DF920F8B83C9

q = 0x816A1470458925DC7C7D75DFC831F2B501BE0EB7

g = 0x4B7CEAB74A9E3E392FBB51019619AE1BC08FA2E12D9625D7C667D3E7A6E0795EDF9560875FFEA7A0BF446E81D8819F5AAA1BCC51052A7C76D41004432B6C449FF4CD3655CC03FDF7EC87A9FD6EB687B216F5EA4AA171906511F6AF2328E25E8BE9DB69521BFE2578F864544BBD08B747EA871FED0097EC491A381CEF4DE29E41

y = 0x40438FA26914D406E2B8C944AC1E79A1559707C5C0823C3143F52150400E0A163861A9AF57D4142BC4CC33E889CBE778BA75EAEF9C16F04B0D2AE633AD9B4A228D79921113356815953513999DA528372536CA1CB8E9B89C841CCF4B46E7F1859605DBD1C7633C5C279A03AE7005FAC74DC57542875FAF7B775005E78AAEE702

x = 0x205cd618e80adad75a7b150adcd616b6ec979595
y = pow( g, x, p )
# new Y is 0x333e295edc59cabf40c3babf31e0d3d5aa0de6e071dde00a1207eeb00c61b5e1e5dfe123f5c21c23e8f5b51cf6637e9d4d030bc96799f62eb7ade1f66446f3598082ed929cb5eab2b4ef37776433ddbd31d7dd7c299a28bfd17e4765a312c2afae6eda2c15f7c95dbbd653a918c89b4e5d58f997a4b861fd7ae6227fc717ba39L

msgHash = tran(msg)

k = tran(shaK)
k_inv = inverse_mod( k, q )

r = pow(g, k, p) % q
s = k_inv * ( msgHash + x * r ) % q

r_inv = inverse_mod( r, q)

w = inverse_mod( s, q )
u1 = msgHash * w % q
u2 = r * w % q
v = pow( g, u1, p ) * pow ( y, u2, p ) % p % q
